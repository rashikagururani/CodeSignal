'''
For question visit the link - 
After recently joining Instacart's beta testing developer group, you decide to experiment with their new API. 
You know that the API returns item-specific display-ready strings like 10.0% higher than in-store or 5.0%
lower than in-store that inform users when the price of an item is different from the one in-store. But you want to 
extend this functionality by giving people a better sense of how much more they will be paying for their entire shopping cart.

Your app lets a user decide the total amount x they are willing to pay via Instacart over in-store prices. This you call their price sensitivity.

Your job is to determine whether a given customer will be willing to pay for the given items in their cart based on their stated price sensitivity x.
'''


def isAdmissibleOverpayment(prices, notes, x):
    
    empty =[]
    for i in range (len(prices)):
        in_store_first_list = notes[i].split()
        
        # print('difference:',value_difference_first)
        
        if in_store_first_list[1]=='higher':
            value_difference_first = float(((in_store_first_list[0].split())[0].split('%'))[0])
            # print('i - higher:',i)
            in_store_first_product_cost = prices[i]/(1 + value_difference_first*0.01)
            empty.append(round((prices[i] - in_store_first_product_cost),5) )
            # print('higher',empty)
        
        elif in_store_first_list[1]=='lower':
            value_difference_first = float(((in_store_first_list[0].split())[0].split('%'))[0])
            # print('i_lower:',i)
            in_store_first_product_cost = prices[i]/(1 - value_difference_first*0.01)
            empty.append(round((prices[i] - in_store_first_product_cost),5))
            # print('lower',empty)
        else:
            empty.append(0)
            # print('else',empty)
            
    if sum(empty)<= x:
        return True
    
    else:
        return False
        
